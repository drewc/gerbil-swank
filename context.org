#+TITLE: Contexts

Contexts Where expansion is decided upon. 

Expander Contexts are Gerbil's take on packages, or modules, or namespaces, or what have
you. Since I absolutely love pop-ups for completion, and inline documentation
and the like, it's necessary to explore.


* Usage 

#+begin_src gerbil 
(import :drewc/gerbil-swank/context)

;; 
#+end_src

* The Contexts Dictionary

#+name: context-import
#+begin_src gerbil
  (import :gerbil/expander :std/iter)


#+end_src

* /Function/ find-context
Syntax:

find-context name => context

Arguments and Values:

name---a string designator or a context object.

context---a context object or nil.

Description:

If name is a string designator, find-context locates and returns the context whose name or nickname is name. This search is case sensitive. If there is no such context, find-context returns nil.

If name is a context object, that context object is returned.
#+NAME: find-context
#+begin_src gerbil
  (def (find-context context-designator)
    (if (expander-context? context-designator)
      context-designator 
      (let ((tbl (gx#current-expander-module-registry))
            (symbol (if (string? context-designator)
                      (string->symbol context-designator)
                      context-designator))
            (string (if (symbol? context-designator)
                      (symbol->string context-designator)
                      context-designator)))
        (or (hash-get tbl symbol)
            (hash-get tbl string)
            (call/cc (lambda (cc)
                       (for ((values k v)
                             (in-hash tbl))
                         (when (eq? symbol (expander-context-id v))
                           (cc v)))
                       (cc #f)))))))


#+end_src

**  /Function/ symbol-context

Syntax:

symbol-context symbol => contents

Arguments and Values:

symbol---a symbol.

contents---a context object or nil.

Description:

Returns the home context of symbol.

#+NAME: symbol-context
#+begin_src gerbil
  (def (symbol-context symbol (context (gx#current-expander-context)))
    (if (uninterned-symbol? symbol)
      #f
      (let (binding (hash-get (expander-context-table context) symbol))
        (cond ((not binding) (gx#current-expander-context))
              ((import-binding? binding)
               (symbol-context symbol (import-binding-context binding)))
              (else context)))))
#+end_src



* ~find-symbol~

*Syntax*:

find-symbol string (context (gx#current-expander-context)) 
 => (values symbol status) or #f

*Arguments and Values*:

 - string :: a string.

 - context :: a context designator. The default is the current context.

 - symbol :: a symbol accessible in the context

 - status :: one of inherited:, external: or internal:

*Description*:

find-symbol locates a symbol whose name is string in a context. If a symbol
named string is found in context, directly or by inheritance, the symbol found
is returned as the first value; the second value is as follows:

 - internal: :: If the symbol is present in context as an internal symbol.
 - external: :: If the symbol is present in context as an external symbol.
 - inherited: :: If the symbol is inherited by context through ~import~, but
                 is not present in context itself.

If no such symbol is accessible in context, both values are #f.

#+name: find-symbol
#+begin_src gerbil 
  (def (find-symbol string (context (gx#current-expander-context)))
    "=> /values/ symbol, status (one of inherited:, external: or internal)
    (let* ((s (string->symbol string))
           (binding (hash-get (expander-context-table context) s)))
      (values (if binding s #f)
              (cond ((not binding) #f)
                    ((import-binding? binding) inherited:)
                    ((extern-binding? binding) external:)
                    (else internal:)))))
#+end_src


** /File/ context.ss
#+begin_src gerbil :noweb yes :tangle context.ss
<<context-import>>

(export find-symbol find-context symbol-context)

<<find-symbol>>

<<find-context>>

<<symbol-context>>
#+end_src
